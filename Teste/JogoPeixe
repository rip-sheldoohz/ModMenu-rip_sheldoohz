print("sucesso")
print("sucesso")
print("sucesso")
print("sucesso")
print("sucesso")
print("sucesso")
print("sucesso")
print("sucesso")
print("sucesso")
print("sucesso")
if getgenv().ecohub then warn("Eco Hub : Already executed!") return end
getgenv().ecohub = true

if not game:IsLoaded() then
    game.Loaded:Wait()
end

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Fisch Premium - Eco Hub",
    SubTitle = "by rip_sheldoohz",
    TabWidth = 160,
    Size = UDim2.fromOffset(550, 350),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Create Tabs
local Tabs = {
    Home = Window:AddTab({ Title = "In√≠cio", Icon = "home" }),
    Exclusives = Window:AddTab({ Title = "Exclusivos", Icon = "heart" }),
    Main = Window:AddTab({ Title = "Principal", Icon = "list" }),
    Items = Window:AddTab({ Title = "Itens", Icon = "box" }),
    Teleports = Window:AddTab({ Title = "Teleportes", Icon = "map-pin" }),
    Misc = Window:AddTab({ Title = "Diversos", Icon = "settings" })
}

local Options = Fluent.Options

--Circulo Versao Mobile
local UserInputService = game:GetService("UserInputService")
local DeviceType = (UserInputService and UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled) and "Mobile" or "PC"

if DeviceType == "Mobile" then
    local ClickButton = Instance.new("ScreenGui")
    local MainFrame = Instance.new("Frame")
    local Image = Instance.new("ImageLabel")

    ClickButton.Name = "ClickButton"
    ClickButton.Parent = game.CoreGui
    ClickButton.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    ClickButton.ResetOnSpawn = false

    MainFrame.Name = "MainFrame"
    MainFrame.Parent = ClickButton
    MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    MainFrame.BackgroundTransparency = 1
    MainFrame.BorderSizePixel = 0
    MainFrame.Position = UDim2.new(0.9, 0, 0.2, 0)
    MainFrame.Size = UDim2.new(0, 60, 0, 60)
    MainFrame.Active = true
    MainFrame.Draggable = false

    Image.Name = "ButtonImage"
    Image.Parent = MainFrame
    Image.BackgroundTransparency = 1
    Image.Size = UDim2.new(1, 0, 1, 0)
    Image.Position = UDim2.new(0, 0, 0, 0)
    Image.Image = "rbxassetid://112307487101929"

    local function triggerAction()
        VirtualInputManager:SendKeyEvent(true, "LeftControl", false, game)
        VirtualInputManager:SendKeyEvent(false, "LeftControl", false, game)
    end

    local dragging = false
    local dragStart, startPos

    local function updatePosition(input)
        local delta = input.Position - dragStart
        local newPos = UDim2.new(
            0, math.clamp(startPos.X.Offset + delta.X, 0, workspace.CurrentCamera.ViewportSize.X - MainFrame.AbsoluteSize.X),
            0, math.clamp(startPos.Y.Offset + delta.Y, 0, workspace.CurrentCamera.ViewportSize.Y - MainFrame.AbsoluteSize.Y)
        )
        MainFrame.Position = newPos
    end

    MainFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
            triggerAction()
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.Touch then
            updatePosition(input)
        end
    end)
end


local VirtualInputManager = game:GetService("VirtualInputManager")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualUser = game:GetService("VirtualUser")
local GuiService = game:GetService("GuiService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")

local LocalPlayer = Players.LocalPlayer
local LocalCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local function GetHumanoidRootPart()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return LocalPlayer.Character.HumanoidRootPart
    end
    return nil
end

LocalPlayer.CharacterAdded:Connect(function()
    LocalCharacter = LocalPlayer.Character
end)

local CastMode = "Legit"
local ShakeMode = "Navigation"
local ReelMode = "Blatant"
local autoCastEnabled = false
local autoShakeEnabled = false
local autoReelEnabled = false
local Noclip = false
local AutoCashEnabled = false
local CashThreshold = 100

local connections = {
    autoShake = nil,
    autoReel = nil,
    noclip = nil,
    autoCash = nil
}

spawn(function()
    LocalPlayer.Idled:Connect(function()
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
    end)
end)

spawn(function()
    while task.wait(10) do
        pcall(function()
            ReplicatedStorage:WaitForChild("events"):WaitForChild("afk"):FireServer(false)
        end)
    end
end)

local function autoCast()
    local hrp = GetHumanoidRootPart()
    if not hrp or not LocalCharacter then return end
    
    local tool = LocalCharacter:FindFirstChildOfClass("Tool")
    if not tool or tool:FindFirstChild("bobber") then return end
    
    if CastMode == "Legit" then
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, LocalPlayer, 0)
        
        local connection
        connection = hrp.ChildAdded:Connect(function(child)
            if child.Name == "power" and child:FindFirstChild("powerbar") then
                local bar = child.powerbar:FindFirstChild("bar")
                if bar then
                    local barConnection
                    barConnection = bar:GetPropertyChangedSignal("Size"):Connect(function()
                        if bar.Size == UDim2.new(1, 0, 1, 0) then
                            VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, LocalPlayer, 0)
                            if barConnection then barConnection:Disconnect() end
                            if connection then connection:Disconnect() end
                        end
                    end)
                end
            end
        end)
        
        task.delay(5, function()
            if connection then connection:Disconnect() end
        end)
        
    elseif CastMode == "Blatant" then
        if tool and tool:FindFirstChild("values") and string.find(tool.Name, "Rod") then
            task.wait(0.3)
            local random = math.random(90, 99)
            pcall(function()
                tool.events.cast:FireServer(random)
            end)
        end
    end
end

local function autoShake()
    local shakeui = PlayerGui:FindFirstChild("shakeui")
    if not shakeui then return end
    
    local safezone = shakeui:FindFirstChild("safezone")
    if not safezone then return end
    
    local button = safezone:FindFirstChild("button")
    if not button then return end
    
    if ShakeMode == "Navigation" then
        task.wait(0.2)
        GuiService.SelectedObject = button
        if GuiService.SelectedObject == button then
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
        end
        task.wait(0.1)
        GuiService.SelectedObject = nil
    elseif ShakeMode == "Mouse" then
        local pos = button.AbsolutePosition
        local size = button.AbsoluteSize
        VirtualInputManager:SendMouseButtonEvent(pos.X + size.X / 2, pos.Y + size.Y / 2, 0, true, LocalPlayer, 0)
        VirtualInputManager:SendMouseButtonEvent(pos.X + size.X / 2, pos.Y + size.Y / 2, 0, false, LocalPlayer, 0)
    end
end

local function startAutoShake()
    if connections.autoShake or not autoShakeEnabled then return end
    connections.autoShake = RunService.RenderStepped:Connect(function()
        pcall(autoShake)
    end)
end

local function stopAutoShake()
    if connections.autoShake then
        connections.autoShake:Disconnect()
        connections.autoShake = nil
    end
end

local function autoReel()
    local reel = PlayerGui:FindFirstChild("reel")
    if not reel then return end
    
    local bar = reel:FindFirstChild("bar")
    if not bar then return end
    
    local playerbar = bar:FindFirstChild("playerbar")
    local fish = bar:FindFirstChild("fish")
    
    if playerbar and fish then
        playerbar.Position = fish.Position
    end
end

local function startAutoReel()
    if ReelMode == "Legit" then
        if connections.autoReel or not autoReelEnabled then return end
        
        local reel = PlayerGui:FindFirstChild("reel")
        if not reel then return end
        
        local bar = reel:FindFirstChild("bar")
        if not bar then return end
        
        local playerbar = bar:FindFirstChild("playerbar")
        if playerbar then
            playerbar.Position = UDim2.new(0, 0, -35, 0)
        end
        
        task.wait(0.5)
        connections.autoReel = RunService.RenderStepped:Connect(function()
            pcall(autoReel)
        end)
    elseif ReelMode == "Blatant" then
        local reel = PlayerGui:FindFirstChild("reel")
        if not reel then return end
        
        local bar = reel:FindFirstChild("bar")
        if not bar then return end
        
        task.spawn(function()
            pcall(function()
                ReplicatedStorage:WaitForChild("events"):WaitForChild("reelfinished"):FireServer(100, false)
            end)
        end)
    end
end

local function stopAutoReel()
    if connections.autoReel then
        connections.autoReel:Disconnect()
        connections.autoReel = nil
    end
end

PlayerGui.DescendantAdded:Connect(function(descendant)
    if autoShakeEnabled and descendant.Name == "button" and descendant.Parent and descendant.Parent.Name == "safezone" then
        startAutoShake()
    end
    
    if autoReelEnabled and descendant.Name == "playerbar" and descendant.Parent and descendant.Parent.Name == "bar" then
        startAutoReel()
    end
end)

PlayerGui.DescendantRemoving:Connect(function(descendant)
    if descendant.Name == "playerbar" and descendant.Parent and descendant.Parent.Name == "bar" then
        stopAutoReel()
        if autoCastEnabled then
            task.delay(1, function()
                pcall(autoCast)
            end)
        end
    end
    
    if descendant.Name == "button" and descendant.Parent and descendant.Parent.Name == "safezone" then
        stopAutoShake()
    end
end)

local function SellHand()
    local hrp = GetHumanoidRootPart()
    if not hrp then 
        print("[EcoHub] Character not found")
        return false
    end
    
    local currentPosition = hrp.CFrame
    local sellPosition = CFrame.new(464, 151, 232)
    
    hrp.CFrame = sellPosition
    task.wait(0.5)
    
    local success = pcall(function()
        Workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Marc Merchant"):WaitForChild("merchant"):WaitForChild("sell"):InvokeServer()
    end)
    
    task.wait(0.5)
    if GetHumanoidRootPart() then
        GetHumanoidRootPart().CFrame = currentPosition
    end
    
    if success then
        print("[EcoHub] Fish sold")
    end
    
    return success
end

local function SellAll()
    local hrp = GetHumanoidRootPart()
    if not hrp then 
        print("[EcoHub] Character not found")
        return false
    end
    
    local currentPosition = hrp.CFrame
    local sellPosition = CFrame.new(464, 151, 232)
    
    hrp.CFrame = sellPosition
    task.wait(0.5)
    
    local success = pcall(function()
        Workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Marc Merchant"):WaitForChild("merchant"):WaitForChild("sellall"):InvokeServer()
    end)
    
    task.wait(0.5)
    if GetHumanoidRootPart() then
        GetHumanoidRootPart().CFrame = currentPosition
    end
    
    if success then
        print("[EcoHub] All fishes sold")
    end
    
    return success
end

local function GetCurrentMoney()
    local success, result = pcall(function()
        local hud = PlayerGui:FindFirstChild("hud")
        if hud and hud:FindFirstChild("safezone") and hud.safezone:FindFirstChild("coins") then
            local coinsText = hud.safezone.coins.Text
            local moneyValue = tonumber(string.match(coinsText, "%d+"))
            return moneyValue or 0
        end
        return 0
    end)
    
    return success and result or 0
end

local function AutoCashLoop()
    while AutoCashEnabled do
        task.wait(3)
        
        if not AutoCashEnabled then break end
        
        local currentMoney = GetCurrentMoney()
        
        if currentMoney >= CashThreshold then
            local success = pcall(function()
                if SellAll() then
                    print("[EcoHub] Auto Cash: Sold all fishes")
                end
            end)
            
            if not success then
                print("[EcoHub] Auto Cash: Error occurred")
            end
            
            task.wait(5)
        end
    end
end

connections.noclip = RunService.Stepped:Connect(function()
    if Noclip then
        pcall(function()
            if LocalPlayer.Character then
                for _, v in pairs(LocalPlayer.Character:GetDescendants()) do
                    if v:IsA("BasePart") and v.CanCollide == true then
                        v.CanCollide = false
                    end
                end
            end
        end)
    end
end)

spawn(function()
    while task.wait(1) do
        if autoCastEnabled then
            pcall(autoCast)
        end
    end
end)

_G.EcoHub = {
    AutoCast = function(state)
        autoCastEnabled = state
        print("[EcoHub] Auto Cast: " .. (state and "ON" or "OFF"))
    end,
    AutoShake = function(state)
        autoShakeEnabled = state
        if state then
            startAutoShake()
            print("[EcoHub] Auto Shake: ON")
        else
            stopAutoShake()
            print("[EcoHub] Auto Shake: OFF")
        end
    end,
    AutoReel = function(state)
        autoReelEnabled = state
        if state then
            startAutoReel()
            print("[EcoHub] Auto Reel: ON")
        else
            stopAutoReel()
            print("[EcoHub] Auto Reel: OFF")
        end
    end,
    SellHand = function()
        SellHand()
    end,
    SellAll = function()
        SellAll()
    end,
    SetCastMode = function(mode)
        if mode == "Legit" or mode == "Blatant" then
            CastMode = mode
            print("[EcoHub] Cast Mode: " .. mode)
        end
    end,
    SetShakeMode = function(mode)
        if mode == "Navigation" or mode == "Mouse" then
            ShakeMode = mode
            print("[EcoHub] Shake Mode: " .. mode)
        end
    end,
    SetReelMode = function(mode)
        if mode == "Legit" or mode == "Blatant" then
            ReelMode = mode
            print("[EcoHub] Reel Mode: " .. mode)
        end
    end,
    Noclip = function(state)
        Noclip = state
        print("[EcoHub] Noclip: " .. (state and "ON" or "OFF"))
    end,
    AutoCash = function(state, threshold)
        AutoCashEnabled = state
        if threshold then
            CashThreshold = threshold
        end
        print("[EcoHub] Auto Cash: " .. (state and "ON" or "OFF"))
        if state then
            AutoCashLoop()
        end
    end
}

-- HOME TAB
local function obfuscateName()
    local chars = {"Game", "Ui", "System", "Tool", "Helper", "Manager", "Handler", "Controller"}
    local nums = tostring(math.random(1000, 9999))
    return chars[math.random(#chars)] .. nums
end

local guiName = obfuscateName()
local mainFrameName = obfuscateName()
local scriptName = obfuscateName()

local function safeGetService(serviceName)
    local ok, service = pcall(function() return game:GetService(serviceName) end)
    return ok and service or nil
end

local Services = {
    Players = safeGetService("Players"),
    RunService = safeGetService("RunService"),
    ReplicatedStorage = safeGetService("ReplicatedStorage"),
    UserInputService = safeGetService("UserInputService")
}

if not Services.Players then return end

local player = Services.Players.LocalPlayer
if not player then
    Services.Players:GetPropertyChangedSignal("LocalPlayer"):Wait()
    player = Services.Players.LocalPlayer
end

local isMobile = false
pcall(function()
    if Services.UserInputService and Services.UserInputService.TouchEnabled and not Services.UserInputService.KeyboardEnabled then
        isMobile = true
    end
end)

local BypassConfig = {
    Enabled = false,
    IsRunning = false,
    ObjectsRemoved = 0,
    Connections = {},
    LastCleanup = 0,
    CleanupInterval = isMobile and 180 or 60,
    MaxObjectsPerCleanup = isMobile and 3 or 10,
    MonitorInterval = isMobile and 120 or 45,
    ProcessDelay = isMobile and 0.3 or 0.1,
    ToggleInProgress = false
}

local detectionPatterns = {
    "anticheat", "anti_cheat", "anticheats",
    "ac_", "_ac", "detect", "detection",
    "monitor", "guard", "security",
    "scanner", "watcher", "tracker"
}

local protectedNames = {
    "FluentUI", "Fluent", "Library", "MainFrame", "Container", "EcoHub",
    guiName, mainFrameName, scriptName
}

local function isProtectedGui(obj)
    if not obj or not obj.Name then return false end
    local name = obj.Name
    for _, protected in ipairs(protectedNames) do
        if string.find(name, protected, 1, true) then
            return true
        end
    end
    return false
end

local function containsSuspicious(name)
    if not name or type(name) ~= "string" then return false end
    local lower = string.lower(name)
    for _, pattern in ipairs(detectionPatterns) do
        if string.find(lower, pattern, 1, true) then
            return true
        end
    end
    return false
end

local function safeDestroy(obj)
    if not obj or not obj.Parent or isProtectedGui(obj) then return false end
    
    local success = pcall(function()
        if obj:IsA("LocalScript") or obj:IsA("Script") or obj:IsA("ModuleScript") then
            obj.Disabled = true
        end
        obj.Parent = nil
        obj:Destroy()
    end)
    
    if success then
        BypassConfig.ObjectsRemoved = BypassConfig.ObjectsRemoved + 1
        return true
    end
    return false
end

local lastCleanupTime = 0

local function optimizedCleanup()
    local now = tick()
    if now - lastCleanupTime < BypassConfig.CleanupInterval then return end
    lastCleanupTime = now

    task.spawn(function()
        if not BypassConfig.Enabled or not BypassConfig.IsRunning then return end
        
        pcall(function()
            if player and player.PlayerGui then
                task.wait(BypassConfig.ProcessDelay)
                local guis = player.PlayerGui:GetChildren()
                for i = 1, math.min(#guis, BypassConfig.MaxObjectsPerCleanup) do
                    if not BypassConfig.Enabled or not BypassConfig.IsRunning then break end
                    local gui = guis[i]
                    if gui and containsSuspicious(gui.Name) and not isProtectedGui(gui) then
                        safeDestroy(gui)
                        if isMobile then
                            task.wait(BypassConfig.ProcessDelay)
                        end
                    end
                end
            end
        end)
    end)
end

local function hookProtection()
    if not hookmetamethod then return end
    
    pcall(function()
        local old
        old = hookmetamethod(game, "__namecall", function(self, ...)
            local method = getnamecallmethod()
            if method == "Kick" and (self == player or self.Parent == player) then
                return nil
            end
            return old(self, ...)
        end)
    end)
end

local monitorConnection = nil

local function startMonitorLoop()
    if monitorConnection then return end
    
    monitorConnection = Services.RunService.Heartbeat:Connect(function()
        if not BypassConfig.Enabled or not BypassConfig.IsRunning then
            if monitorConnection then
                monitorConnection:Disconnect()
                monitorConnection = nil
            end
            return
        end
        
        optimizedCleanup()
    end)
end

local guiConnection = nil

local function startGuiMonitor()
    if guiConnection or not player or not player.PlayerGui then return end
    
    guiConnection = player.PlayerGui.ChildAdded:Connect(function(child)
        if not BypassConfig.Enabled or not BypassConfig.IsRunning then return end
        
        task.delay(0.7, function()
            if child and containsSuspicious(child.Name) and not isProtectedGui(child) then
                safeDestroy(child)
            end
        end)
    end)
end

local function startBypass()
    if BypassConfig.IsRunning or BypassConfig.ToggleInProgress then return end
    BypassConfig.ToggleInProgress = true
    
    BypassConfig.IsRunning = true
    BypassConfig.ObjectsRemoved = 0
    lastCleanupTime = 0
    
    print("[EcoHub] Iniciando bypass")
    
    task.spawn(function()
        task.wait(isMobile and 10 or 4)
        pcall(hookProtection)
        task.wait(BypassConfig.ProcessDelay)
        pcall(optimizedCleanup)
        task.wait(BypassConfig.ProcessDelay)
        pcall(startGuiMonitor)
        pcall(startMonitorLoop)
        print("[EcoHub] Bypass ativo")
        BypassConfig.ToggleInProgress = false
    end)
end

local function stopBypass()
    if BypassConfig.ToggleInProgress then return end
    BypassConfig.ToggleInProgress = true
    
    BypassConfig.IsRunning = false
    
    if monitorConnection then
        monitorConnection:Disconnect()
        monitorConnection = nil
    end
    
    if guiConnection then
        guiConnection:Disconnect()
        guiConnection = nil
    end
    
    for _, conn in ipairs(BypassConfig.Connections) do
        pcall(function() conn:Disconnect() end)
    end
    BypassConfig.Connections = {}
    
    print("[EcoHub] Bypass desativado")
    BypassConfig.ToggleInProgress = false
end

if _G.EcoHubBypass then
    pcall(function() _G.EcoHubBypass.Stop() end)
end

_G.EcoHubBypass = {
    Start = startBypass,
    Stop = stopBypass,
    Config = BypassConfig
}

Tabs.Home:AddSection("Bypass Fisch")

if Tabs and Tabs.Home then
    Tabs.Home:AddParagraph({
        Title = "Bem-vindo ao Eco Hub",
        Content = "Script premium para Fisch com automacao avancada\nEntre no Discord para suporte e atualizacoes"
    })
    
    Tabs.Home:AddButton({
        Title = "Copiar Link do Discord",
        Description = "discord.gg/ecohub",
        Callback = function()
            pcall(function()
                setclipboard("https://discord.gg/ecohub")
                print("[EcoHub] Link do Discord copiado")
            end)
        end
    })
    
    Tabs.Home:AddToggle("BypassToggle", {
        Title = "Ativar Bypass",
        Description = "Sistema otimizado para celular",
        Default = true,
        Callback = function(Value)
            if BypassConfig.ToggleInProgress then return end
            BypassConfig.Enabled = Value
            if Value then
                startBypass()
            else
                stopBypass()
            end
        end
    })
    
    Tabs.Home:AddParagraph({
        Title = "Modo Automatico",
        Content = "Detecta celular ou PC e ajusta automaticamente para nao travar"
    })
end

print("[EcoHub] Sistema de bypass carregado")
print("[EcoHub] Tipo: " .. (isMobile and "Celular" or "PC"))
print("[EcoHub] Use _G.EcoHubBypass.Start() para ativar")

-- EXCLUSIVES TAB

local VirtualInputManager = game:GetService("VirtualInputManager")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")

local LocalPlayer = Players.LocalPlayer
local LocalCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local function GetHumanoidRootPart()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return LocalPlayer.Character.HumanoidRootPart
    end
    return nil
end

LocalPlayer.CharacterAdded:Connect(function()
    LocalCharacter = LocalPlayer.Character
end)

local RodDupeDelay = 0.2
local shadowCountLabel = nil

pcall(function()
    local screenGui = Instance.new("ScreenGui", PlayerGui)
    screenGui.Name = "EcoHubShadowCounter"
    
    shadowCountLabel = Instance.new("TextLabel", screenGui)
    shadowCountLabel.Size = UDim2.new(0, 200, 0, 50)
    shadowCountLabel.Position = UDim2.new(0, 30, 0, 260)
    shadowCountLabel.BackgroundTransparency = 0.5
    shadowCountLabel.BackgroundColor3 = Color3.fromRGB(38, 38, 38)
    shadowCountLabel.TextColor3 = Color3.fromRGB(0, 255, 127)
    shadowCountLabel.Font = Enum.Font.SourceSansBold
    shadowCountLabel.TextSize = 24
    shadowCountLabel.Text = "Sombras: 0"
    shadowCountLabel.Visible = false
    
    local corner = Instance.new("UICorner", shadowCountLabel)
    corner.CornerRadius = UDim.new(0, 10)
end)

spawn(function()
    while task.wait(1) do
        pcall(function()
            if shadowCountLabel and shadowCountLabel.Visible and Workspace:FindFirstChild("Shadows") then
                local count = #Workspace.Shadows:GetChildren()
                shadowCountLabel.Text = "Sombras: " .. count
            end
        end)
    end
end)

if Tabs and Tabs.Exclusives then
    Tabs.Exclusives:AddSection("Recursos de Sombra")
    
    Tabs.Exclusives:AddToggle("CountShadows", {
        Title = "Mostrar Contador de Sombras",
        Default = false
    }):OnChanged(function(value)
        if shadowCountLabel then
            shadowCountLabel.Visible = value
        end
    end)
    
    local rodSpamActive = false
    
    Tabs.Exclusives:AddToggle("RodSpam", {
        Title = "Spam de Vara das Profundezas",
        Default = false
    }):OnChanged(function(value)
        pcall(function()
            if value then
                rodSpamActive = true
                spawn(function()
                    while rodSpamActive and Options.RodSpam.Value do
                        pcall(function()
                            ReplicatedStorage.events.equiprod:FireServer("Flimsy Rod")
                            task.wait(RodDupeDelay / 2)
                            ReplicatedStorage.events.equiprod:FireServer("Rod Of The Depths")
                        end)
                        task.wait(RodDupeDelay)
                    end
                end)
            else
                rodSpamActive = false
            end
        end)
    end)
    
    Tabs.Exclusives:AddSlider("RodSpamDelay", {
        Title = "Delay do Spam de Vara",
        Min = 0.1,
        Max = 1,
        Default = 0.2,
        Rounding = 2
    }):OnChanged(function(value)
        RodDupeDelay = value
    end)
    
    Tabs.Exclusives:AddButton({
        Title = "Duplicar Sombra",
        Description = "Duplica itens de sombra",
        Callback = function()
            pcall(function()
                local backpack = LocalPlayer.Backpack
                local character = LocalCharacter
                
                if not backpack or not character then
                    return
                end
                
                for _, v in pairs(backpack:GetChildren()) do
                    if v:FindFirstChild("offer") then
                        v.Parent = character
                    end
                end
                
                task.wait(2)
                
                for _, v in pairs(character:GetChildren()) do
                    if v:FindFirstChild("offer") then
                        v.Parent = backpack
                    end
                end
            end)
        end
    })
    
    Tabs.Exclusives:AddButton({
        Title = "Destruir Todas as Sombras",
        Description = "Remove sombras do workspace",
        Callback = function()
            pcall(function()
                if Workspace:FindFirstChild("Shadows") then
                    local count = 0
                    for _, shadow in pairs(Workspace.Shadows:GetChildren()) do
                        shadow:Destroy()
                        count = count + 1
                    end
                else
                    return
                end
            end)
        end
    })
end

-- MAIN TAB
local VirtualInputManager = game:GetService("VirtualInputManager")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GuiService = game:GetService("GuiService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")

local LocalPlayer = Players.LocalPlayer
local LocalCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local function GetHumanoidRootPart()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return LocalPlayer.Character.HumanoidRootPart
    end
    return nil
end

LocalPlayer.CharacterAdded:Connect(function()
    LocalCharacter = LocalPlayer.Character
end)

local autoCastEnabled = false
local autoShakeEnabled = false
local autoReelEnabled = false
local FreezeChar = false
local CastMode = "Legit"
local ShakeMode = "Navigation"
local ReelMode = "Blatant"

local connections = {
    autoShake = nil,
    autoReel = nil,
    freeze = nil
}

local function autoCast()
    local hrp = GetHumanoidRootPart()
    if not hrp or not LocalCharacter then return end
    
    local tool = LocalCharacter:FindFirstChildOfClass("Tool")
    if not tool or tool:FindFirstChild("bobber") then return end
    
    if CastMode == "Legit" then
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, LocalPlayer, 0)
        
        local connection
        connection = hrp.ChildAdded:Connect(function(child)
            if child.Name == "power" and child:FindFirstChild("powerbar") then
                local bar = child.powerbar:FindFirstChild("bar")
                if bar then
                    local barConnection
                    barConnection = bar:GetPropertyChangedSignal("Size"):Connect(function()
                        if bar.Size == UDim2.new(1, 0, 1, 0) then
                            VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, LocalPlayer, 0)
                            if barConnection then barConnection:Disconnect() end
                            if connection then connection:Disconnect() end
                        end
                    end)
                end
            end
        end)
        
        task.delay(5, function()
            if connection then connection:Disconnect() end
        end)
        
    elseif CastMode == "Blatant" then
        if tool and tool:FindFirstChild("values") and string.find(tool.Name, "Rod") then
            task.wait(0.3)
            local random = math.random(90, 99)
            pcall(function()
                tool.events.cast:FireServer(random)
            end)
        end
    end
end

local function autoShake()
    local shakeui = PlayerGui:FindFirstChild("shakeui")
    if not shakeui then return end
    
    local safezone = shakeui:FindFirstChild("safezone")
    if not safezone then return end
    
    local button = safezone:FindFirstChild("button")
    if not button then return end
    
    if ShakeMode == "Navigation" then
        task.wait(0.2)
        GuiService.SelectedObject = button
        if GuiService.SelectedObject == button then
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
        end
        task.wait(0.1)
        GuiService.SelectedObject = nil
    elseif ShakeMode == "Mouse" then
        local pos = button.AbsolutePosition
        local size = button.AbsoluteSize
        VirtualInputManager:SendMouseButtonEvent(pos.X + size.X / 2, pos.Y + size.Y / 2, 0, true, LocalPlayer, 0)
        VirtualInputManager:SendMouseButtonEvent(pos.X + size.X / 2, pos.Y + size.Y / 2, 0, false, LocalPlayer, 0)
    end
end

local function startAutoShake()
    if connections.autoShake or not autoShakeEnabled then return end
    connections.autoShake = RunService.RenderStepped:Connect(function()
        pcall(autoShake)
    end)
end

local function stopAutoShake()
    if connections.autoShake then
        connections.autoShake:Disconnect()
        connections.autoShake = nil
    end
end

local function autoReel()
    local reel = PlayerGui:FindFirstChild("reel")
    if not reel then return end
    
    local bar = reel:FindFirstChild("bar")
    if not bar then return end
    
    local playerbar = bar:FindFirstChild("playerbar")
    local fish = bar:FindFirstChild("fish")
    
    if playerbar and fish then
        playerbar.Position = fish.Position
    end
end

local function startAutoReel()
    if ReelMode == "Legit" then
        if connections.autoReel or not autoReelEnabled then return end
        
        local reel = PlayerGui:FindFirstChild("reel")
        if not reel then return end
        
        local bar = reel:FindFirstChild("bar")
        if not bar then return end
        
        local playerbar = bar:FindFirstChild("playerbar")
        if playerbar then
            playerbar.Position = UDim2.new(0, 0, -35, 0)
        end
        
        task.wait(0.5)
        connections.autoReel = RunService.RenderStepped:Connect(function()
            pcall(autoReel)
        end)
    elseif ReelMode == "Blatant" then
        local reel = PlayerGui:FindFirstChild("reel")
        if not reel then return end
        
        local bar = reel:FindFirstChild("bar")
        if not bar then return end
        
        task.spawn(function()
            pcall(function()
                ReplicatedStorage:WaitForChild("events"):WaitForChild("reelfinished"):FireServer(100, false)
            end)
        end)
    end
end

local function stopAutoReel()
    if connections.autoReel then
        connections.autoReel:Disconnect()
        connections.autoReel = nil
    end
end

PlayerGui.DescendantAdded:Connect(function(descendant)
    if autoShakeEnabled and descendant.Name == "button" and descendant.Parent and descendant.Parent.Name == "safezone" then
        startAutoShake()
    end
    
    if autoReelEnabled and descendant.Name == "playerbar" and descendant.Parent and descendant.Parent.Name == "bar" then
        startAutoReel()
    end
end)

PlayerGui.DescendantRemoving:Connect(function(descendant)
    if descendant.Name == "playerbar" and descendant.Parent and descendant.Parent.Name == "bar" then
        stopAutoReel()
        if autoCastEnabled then
            task.delay(1, function()
                pcall(autoCast)
            end)
        end
    end
    
    if descendant.Name == "button" and descendant.Parent and descendant.Parent.Name == "safezone" then
        stopAutoShake()
    end
end)

if Tabs and Tabs.Main then
    Tabs.Main:AddSection("Auto Pescar")
    
    Tabs.Main:AddToggle("AutoCast", {
        Title = "Auto Lancar",
        Default = false
    }):OnChanged(function(value)
        autoCastEnabled = value
        if value then
            pcall(function()
                local RodName = ReplicatedStorage.playerstats[LocalPlayer.Name].Stats.rod.Value
                if LocalPlayer.Backpack:FindFirstChild(RodName) then
                    LocalCharacter.Humanoid:EquipTool(LocalPlayer.Backpack[RodName])
                end
            end)
            
            spawn(function()
                while autoCastEnabled do
                    pcall(autoCast)
                    task.wait(1)
                end
            end)
        end
    end)
    
    Tabs.Main:AddToggle("AutoShake", {
        Title = "Auto Agitar",
        Default = false
    }):OnChanged(function(value)
        autoShakeEnabled = value
        if value then
            startAutoShake()
        else
            stopAutoShake()
        end
    end)
    
    Tabs.Main:AddToggle("AutoReel", {
        Title = "Auto Recolher",
        Default = false
    }):OnChanged(function(value)
        autoReelEnabled = value
        if not value then
            stopAutoReel()
        end
    end)
    
    Tabs.Main:AddToggle("FreezeChar", {
        Title = "Congelar Personagem",
        Default = false
    }):OnChanged(function(value)
        FreezeChar = value
        if value then
            local hrp = GetHumanoidRootPart()
            if hrp then
                local oldpos = hrp.CFrame
                if connections.freeze then
                    connections.freeze:Disconnect()
                end
                connections.freeze = RunService.Stepped:Connect(function()
                    if FreezeChar then
                        pcall(function()
                            local currentHrp = GetHumanoidRootPart()
                            if currentHrp then
                                currentHrp.CFrame = oldpos
                            end
                        end)
                    else
                        if connections.freeze then
                            connections.freeze:Disconnect()
                            connections.freeze = nil
                        end
                    end
                end)
            end
        else
            if connections.freeze then
                connections.freeze:Disconnect()
                connections.freeze = nil
            end
        end
    end)
    
    Tabs.Main:AddSection("Modos de Pesca")
    
    Tabs.Main:AddDropdown("CastMode", {
        Title = "Modo de Lancamento",
        Values = {"Legit", "Blatant"},
        Default = 1
    }):OnChanged(function(value)
        CastMode = value
    end)
    
    Tabs.Main:AddDropdown("ShakeMode", {
        Title = "Modo de Agitacao",
        Values = {"Navigation", "Mouse"},
        Default = 1
    }):OnChanged(function(value)
        ShakeMode = value
    end)
    
    Tabs.Main:AddDropdown("ReelMode", {
        Title = "Modo de Recolhimento",
        Values = {"Legit", "Blatant"},
        Default = 2
    }):OnChanged(function(value)
        ReelMode = value
    end)
end

-- ITEMS TAB
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")

local LocalPlayer = Players.LocalPlayer
local LocalCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

local function GetHumanoidRootPart()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return LocalPlayer.Character.HumanoidRootPart
    end
    return nil
end

LocalPlayer.CharacterAdded:Connect(function()
    LocalCharacter = LocalPlayer.Character
end)

local AutoCashEnabled = false
local CashThreshold = 100

local function GetCurrentMoney()
    local success, result = pcall(function()
        local PlayerGui = LocalPlayer:FindFirstChild("PlayerGui")
        if PlayerGui and PlayerGui:FindFirstChild("hud") then
            local hud = PlayerGui.hud
            if hud:FindFirstChild("safezone") and hud.safezone:FindFirstChild("coins") then
                local coinsText = hud.safezone.coins.Text
                local moneyValue = tonumber(string.match(coinsText, "%d+"))
                return moneyValue or 0
            end
        end
        return 0
    end)
    
    return success and result or 0
end

local function SellHand()
    local hrp = GetHumanoidRootPart()
    if not hrp then
        return false
    end
    
    local currentPosition = hrp.CFrame
    local sellPosition = CFrame.new(464, 151, 232)
    
    hrp.CFrame = sellPosition
    task.wait(0.5)
    
    local success = pcall(function()
        Workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Marc Merchant"):WaitForChild("merchant"):WaitForChild("sell"):InvokeServer()
    end)
    
    task.wait(0.5)
    if GetHumanoidRootPart() then
        GetHumanoidRootPart().CFrame = currentPosition
    end
    
    return success
end

local function SellAll()
    local hrp = GetHumanoidRootPart()
    if not hrp then
        return false
    end
    
    local currentPosition = hrp.CFrame
    local sellPosition = CFrame.new(464, 151, 232)
    
    hrp.CFrame = sellPosition
    task.wait(0.5)
    
    local success = pcall(function()
        Workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Marc Merchant"):WaitForChild("merchant"):WaitForChild("sellall"):InvokeServer()
    end)
    
    task.wait(0.5)
    if GetHumanoidRootPart() then
        GetHumanoidRootPart().CFrame = currentPosition
    end
    
    return success
end

local function AutoCashLoop()
    while AutoCashEnabled do
        task.wait(3)
        
        if not AutoCashEnabled then break end
        
        local currentMoney = GetCurrentMoney()
        
        if currentMoney >= CashThreshold then
            pcall(function()
                SellAll()
            end)
            
            task.wait(5)
        end
    end
end

if Tabs and Tabs.Items then
    Tabs.Items:AddSection("Caca ao Tesouro")
    
    Tabs.Items:AddButton({
        Title = "Teleportar para Jack Marrow",
        Description = "Local do NPC de tesouro",
        Callback = function()
            pcall(function()
                local hrp = GetHumanoidRootPart()
                if hrp then
                    hrp.CFrame = CFrame.new(-2824.359, 214.311, 1518.130)
                end
            end)
        end
    })
    
    Tabs.Items:AddButton({
        Title = "Reparar Mapa do Tesouro",
        Callback = function()
            pcall(function()
                for _, v in pairs(LocalPlayer.Backpack:GetChildren()) do
                    if v.Name == "Treasure Map" then
                        LocalCharacter.Humanoid:EquipTool(v)
                        Workspace.world.npcs["Jack Marrow"].treasure.repairmap:InvokeServer()
                        return
                    end
                end
            end)
        end
    })
    
    Tabs.Items:AddButton({
        Title = "Coletar Todos os Tesouros",
        Callback = function()
            spawn(function()
                pcall(function()
                    for _, v in ipairs(Workspace:GetDescendants()) do
                        if v.ClassName == "ProximityPrompt" then
                            v.HoldDuration = 0
                        end
                    end
                    
                    for _, v in pairs(Workspace.world.chests:GetDescendants()) do
                        if v:IsA("Part") and v:FindFirstChild("ChestSetup") then
                            local hrp = GetHumanoidRootPart()
                            if hrp then
                                hrp.CFrame = v.CFrame
                                task.wait(0.5)
                                for _, prompt in pairs(Workspace.world.chests:GetDescendants()) do
                                    if prompt.Name == "ProximityPrompt" then
                                        fireproximityprompt(prompt)
                                    end
                                end
                                task.wait(1)
                            end
                        end
                    end
                end)
            end)
        end
    })
    
    Tabs.Items:AddSection("Vender")
    
    Tabs.Items:AddButton({
        Title = "Vender Item na Mao",
        Callback = function()
            spawn(function()
                SellHand()
            end)
        end
    })
    
    Tabs.Items:AddButton({
        Title = "Vender Todos os Itens",
        Callback = function()
            spawn(function()
                SellAll()
            end)
        end
    })
    
    Tabs.Items:AddSection("Auto Vender")
    
    Tabs.Items:AddToggle("AutoCash", {
        Title = "Auto Vender Tudo",
        Description = "Vende quando atingir o valor definido",
        Default = false
    }):OnChanged(function(value)
        AutoCashEnabled = value
        if value then
            spawn(AutoCashLoop)
        end
    end)
    
    Tabs.Items:AddSlider("CashThreshold", {
        Title = "Valor Minimo ($)",
        Min = 50,
        Max = 10000,
        Default = 100,
        Rounding = 0
    }):OnChanged(function(value)
        CashThreshold = value
    end)
end

--Teleporte Tab
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

local function GetHumanoidRootPart()
    local character = LocalPlayer.Character
    if character then
        return character:FindFirstChild("HumanoidRootPart")
    end
    return nil
end

if Tabs and Tabs.Teleports then
    Tabs.Teleports:AddParagraph({
        Title = "Localizacoes",
        Content = "Teleporte para diferentes areas do mapa"
    })
    
    local teleportSpots = {"Spawn", "Beach", "Forest", "Mountain", "Cave"}
    
    Tabs.Teleports:AddDropdown("AreaTP", {
        Title = "Teleportar para Area",
        Description = "Escolha uma area para teleportar",
        Values = teleportSpots,
        Multi = false,
        Default = 1,
        Callback = function(value)
            if value then
                task.spawn(function()
                    pcall(function()
                        local hrp = GetHumanoidRootPart()
                        if hrp then
                            local positions = {
                                Spawn = CFrame.new(0, 50, 0),
                                Beach = CFrame.new(100, 30, 100),
                                Forest = CFrame.new(-200, 40, -150),
                                Mountain = CFrame.new(500, 150, 300),
                                Cave = CFrame.new(-400, 20, -300)
                            }
                            
                            if positions[value] then
                                hrp.CFrame = positions[value]
                            end
                        end
                    end)
                end)
            end
        end
    })
    
    Tabs.Teleports:AddDropdown("TotemTP", {
        Title = "Teleportar para Totem",
        Description = "Escolha um totem para teleportar",
        Values = {"Aurora", "Sundial", "Windset", "Smokescreen", "Tempest"},
        Multi = false,
        Default = 1,
        Callback = function(value)
            if value then
                task.spawn(function()
                    pcall(function()
                        local hrp = GetHumanoidRootPart()
                        if not hrp then return end
                        
                        local positions = {
                            Aurora = CFrame.new(-1811, -137, -3282),
                            Sundial = CFrame.new(-1148, 135, -1075),
                            Windset = CFrame.new(2849, 178, 2702),
                            Smokescreen = CFrame.new(2789, 140, -625),
                            Tempest = CFrame.new(35, 133, 1943)
                        }
                        
                        if positions[value] then
                            hrp.CFrame = positions[value]
                        end
                    end)
                end)
            end
        end
    })
    
    Tabs.Teleports:AddDropdown("EventTP", {
        Title = "Teleportar para Evento",
        Description = "Escolha um evento para teleportar",
        Values = {"Redemoinho Estranho", "Grande Tubarao Martelo", "Grande Tubarao Branco", "Tubarao Baleia", "As Profundezas Serpente"},
        Multi = false,
        Default = 1,
        Callback = function(value)
            if value then
                task.spawn(function()
                    pcall(function()
                        local hrp = GetHumanoidRootPart()
                        if not hrp then return end
                        
                        local eventMap = {
                            ["Redemoinho Estranho"] = CFrame.new(0, 150, 0),
                            ["Grande Tubarao Martelo"] = CFrame.new(500, 150, 500),
                            ["Grande Tubarao Branco"] = CFrame.new(-500, 150, -500),
                            ["Tubarao Baleia"] = CFrame.new(1000, 150, 1000),
                            ["As Profundezas Serpente"] = CFrame.new(-1000, 50, -1000)
                        }
                        
                        if eventMap[value] then
                            hrp.CFrame = eventMap[value]
                        end
                    end)
                end)
            end
        end
    })
    
    Tabs.Teleports:AddButton({
        Title = "Teleportar para Mercador",
        Description = "Barco do mercador viajante",
        Callback = function()
            pcall(function()
                local hrp = GetHumanoidRootPart()
                if not hrp then return end
                
                local merchant = Workspace.active:FindFirstChild("Merchant Boat")
                if merchant then
                    local boat = merchant:FindFirstChild("Boat")
                    if boat then
                        hrp.CFrame = CFrame.new(boat.Position + Vector3.new(0, 10, 0))
                    end
                end
            end)
        end
    })
    
    Tabs.Teleports:AddButton({
        Title = "Criar Zona Segura",
        Description = "Plataforma flutuante no ceu",
        Callback = function()
            pcall(function()
                local hrp = GetHumanoidRootPart()
                if not hrp then return end
                
                local safezone = Instance.new("Part")
                safezone.Size = Vector3.new(30, 1, 30)
                safezone.Position = Vector3.new(math.random(-2000, 2000), math.random(50000, 90000), math.random(-2000, 2000))
                safezone.Anchored = true
                safezone.BrickColor = BrickColor.new("Lime green")
                safezone.Material = Enum.Material.ForceField
                safezone.CanCollide = true
                safezone.Parent = Workspace
                
                hrp.CFrame = safezone.CFrame + Vector3.new(0, 5, 0)
            end)
        end
    })
end

local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")
local CollectionService = game:GetService("CollectionService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local LocalPlayer = Players.LocalPlayer
local LocalCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local function GetHumanoidRootPart()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return LocalPlayer.Character.HumanoidRootPart
    end
    return nil
end

LocalPlayer.CharacterAdded:Connect(function(char)
    LocalCharacter = char
    task.wait(1)
    
    pcall(function()
        if Options and Options.WalkSpeedSlider and Options.WalkSpeedSlider.Value ~= 16 then
            local humanoid = char:WaitForChild("Humanoid")
            humanoid.WalkSpeed = Options.WalkSpeedSlider.Value
        end
        
        if Options and Options.JumpPowerSlider and Options.JumpPowerSlider.Value ~= 50 then
            local humanoid = char:WaitForChild("Humanoid")
            humanoid.JumpPower = Options.JumpPowerSlider.Value
        end
        
        if Options and Options.InfiniteOxygenToggle and Options.InfiniteOxygenToggle.Value then
            local client = char:FindFirstChild("client")
            if client and client:FindFirstChild("oxygen") then
                client.oxygen.Disabled = true
            end
        end
    end)
end)

local WalkZone = "Ocean"
local Noclip = false
local connections = {
    dayOnly = nil,
    bypassGps = nil,
    noclip = nil
}

local function ExportValue(num, decimals)
    decimals = decimals or 1
    return tonumber(string.format("%." .. decimals .. "f", num))
end

local function GetPosition()
    local hrp = GetHumanoidRootPart()
    if not hrp then
        return {0, 0, 0}
    end
    return {hrp.Position.X, hrp.Position.Y, hrp.Position.Z}
end

if connections.noclip then
    connections.noclip:Disconnect()
end

connections.noclip = RunService.Stepped:Connect(function()
    if Noclip then
        pcall(function()
            if LocalPlayer.Character then
                for _, v in pairs(LocalPlayer.Character:GetDescendants()) do
                    if v:IsA("BasePart") and v.CanCollide then
                        v.CanCollide = false
                    end
                end
            end
        end)
    end
end)

if Tabs and Tabs.Misc then
    Tabs.Misc:AddSection("Character")
    
    Tabs.Misc:AddToggle("WalkOnWaterToggle", {
        Title = "Walk On Water",
        Default = false
    }):OnChanged(function(value)
        pcall(function()
            local zones = Workspace:FindFirstChild("zones")
            if zones and zones:FindFirstChild("fishing") then
                local fishingZones = zones.fishing
                for _, v in pairs(fishingZones:GetChildren()) do
                    if v.Name == WalkZone then
                        v.CanCollide = value
                        if v.Name == "Ocean" then
                            local deepOcean = fishingZones:FindFirstChild("Deep Ocean")
                            if deepOcean then
                                deepOcean.CanCollide = value
                            end
                        end
                    end
                end
            end
        end)
    end)
    
    Tabs.Misc:AddDropdown("WalkZoneDropdown", {
        Title = "Water Zone",
        Values = {"Ocean", "Desolate Deep", "The Depths"},
        Default = 1
    }):OnChanged(function(value)
        WalkZone = value
    end)
    
    Tabs.Misc:AddSlider("WalkSpeedSlider", {
        Title = "Walk Speed",
        Min = 16,
        Max = 200,
        Default = 16,
        Rounding = 1
    }):OnChanged(function(value)
        pcall(function()
            if LocalCharacter and LocalCharacter:FindFirstChild("Humanoid") then
                LocalCharacter.Humanoid.WalkSpeed = value
            end
        end)
    end)
    
    Tabs.Misc:AddSlider("JumpPowerSlider", {
        Title = "Jump Power",
        Min = 50,
        Max = 200,
        Default = 50,
        Rounding = 1
    }):OnChanged(function(value)
        pcall(function()
            if LocalCharacter and LocalCharacter:FindFirstChild("Humanoid") then
                LocalCharacter.Humanoid.JumpPower = value
            end
        end)
    end)
    
    Tabs.Misc:AddToggle("NoclipToggle", {
        Title = "Noclip",
        Default = false
    }):OnChanged(function(value)
        Noclip = value
    end)
    
    Tabs.Misc:AddSection("Game Settings")
    
    Tabs.Misc:AddToggle("FishRadarToggle", {
        Title = "Show Fish Radar",
        Default = false
    }):OnChanged(function(value)
        pcall(function()
            for _, v in pairs(CollectionService:GetTagged("radarTag")) do
                if v:IsA("BillboardGui") or v:IsA("SurfaceGui") then
                    v.Enabled = value
                end
            end
        end)
    end)
    
    Tabs.Misc:AddToggle("GPSToggle", {
        Title = "Show GPS Coordinates",
        Default = false
    }):OnChanged(function(value)
        pcall(function()
            if value then
                local gpsExists = PlayerGui.hud and PlayerGui.hud:FindFirstChild("safezone") and PlayerGui.hud.safezone:FindFirstChild("backpack") and PlayerGui.hud.safezone.backpack:FindFirstChild("xyz")
                
                if not gpsExists then
                    pcall(function()
                        local gpsResource = ReplicatedStorage:FindFirstChild("resources")
                        if gpsResource and gpsResource:FindFirstChild("items") then
                            local itemsFolder = gpsResource.items:FindFirstChild("items")
                            if itemsFolder and itemsFolder:FindFirstChild("GPS") then
                                local gpsItem = itemsFolder.GPS:FindFirstChild("GPS")
                                if gpsItem and gpsItem:FindFirstChild("gpsMain") then
                                    local gpsMain = gpsItem.gpsMain
                                    if gpsMain:FindFirstChild("xyz") then
                                        local gpsClone = gpsMain.xyz:Clone()
                                        if PlayerGui.hud and PlayerGui.hud.safezone and PlayerGui.hud.safezone.backpack then
                                            gpsClone.Parent = PlayerGui.hud.safezone.backpack
                                            
                                            if connections.bypassGps then
                                                connections.bypassGps:Disconnect()
                                            end
                                            
                                            connections.bypassGps = RunService.Heartbeat:Connect(function()
                                                local pos = GetPosition()
                                                local str = string.format("%s, %s, %s", ExportValue(pos[1]), ExportValue(pos[2]), ExportValue(pos[3]))
                                                if gpsClone and gpsClone.Parent then
                                                    gpsClone.Text = "<font color='#ff4949'>X</font><font color='#a3ff81'>Y</font><font color='#626aff'>Z</font>: " .. str
                                                end
                                            end)
                                        end
                                    end
                                end
                            end
                        end
                    end)
                end
            else
                if PlayerGui and PlayerGui:FindFirstChild("hud") then
                    local hud = PlayerGui.hud
                    if hud:FindFirstChild("safezone") and hud.safezone:FindFirstChild("backpack") then
                        local xyz = hud.safezone.backpack:FindFirstChild("xyz")
                        if xyz then
                            xyz:Destroy()
                        end
                    end
                end
                
                if connections.bypassGps then
                    connections.bypassGps:Disconnect()
                    connections.bypassGps = nil
                end
            end
        end)
    end)
    
    Tabs.Misc:AddToggle("RemoveFogToggle", {
        Title = "Remove Fog",
        Default = false
    }):OnChanged(function(value)
        pcall(function()
            if value then
                local sky = Lighting:FindFirstChild("Sky")
                if sky then
                    local bloom = Lighting:FindFirstChild("bloom")
                    if bloom then
                        sky.Parent = bloom
                    else
                        sky.Parent = Lighting
                    end
                end
            else
                local bloom = Lighting:FindFirstChild("bloom")
                if bloom then
                    local sky = bloom:FindFirstChild("Sky")
                    if sky then
                        sky.Parent = Lighting
                    end
                end
            end
        end)
    end)
    
    Tabs.Misc:AddToggle("AlwaysDayToggle", {
        Title = "Always Day",
        Default = false
    }):OnChanged(function(value)
        if value then
            if connections.dayOnly then
                connections.dayOnly:Disconnect()
            end
            connections.dayOnly = RunService.Heartbeat:Connect(function()
                Lighting.TimeOfDay = "12:00:00"
            end)
        else
            if connections.dayOnly then
                connections.dayOnly:Disconnect()
                connections.dayOnly = nil
            end
        end
    end)
    
    Tabs.Misc:AddToggle("InstantInteractToggle", {
        Title = "Instant Interact",
        Default = false
    }):OnChanged(function(value)
        if value then
            pcall(function()
                for _, v in ipairs(Workspace:GetDescendants()) do
                    if v.ClassName == "ProximityPrompt" then
                        v.HoldDuration = 0
                    end
                end
            end)
        end
    end)
    
    Tabs.Misc:AddToggle("InfiniteOxygenToggle", {
        Title = "Infinite Oxygen",
        Default = true
    }):OnChanged(function(value)
        pcall(function()
            if LocalCharacter then
                local client = LocalCharacter:FindFirstChild("client")
                if client and client:FindFirstChild("oxygen") then
                    client.oxygen.Disabled = value
                end
            end
        end)
    end)
    
    Tabs.Misc:AddButton({
        Title = "Copy Position",
        Description = "Copy XYZ to clipboard",
        Callback = function()
            pcall(function()
                local hrp = GetHumanoidRootPart()
                if hrp then
                    local x = ExportValue(hrp.Position.X, 3)
                    local y = ExportValue(hrp.Position.Y, 3)
                    local z = ExportValue(hrp.Position.Z, 3)
                    local code = "CFrame.new(" .. x .. ", " .. y .. ", " .. z .. ")"
                    setclipboard(code)
                end
            end)
        end
    })
    
    Tabs.Misc:AddToggle("ShowUIToggle", {
        Title = "Show Game UI",
        Default = true
    }):OnChanged(function(value)
        pcall(function()
            if PlayerGui and PlayerGui:FindFirstChild("hud") then
                if PlayerGui.hud:FindFirstChild("safezone") then
                    PlayerGui.hud.safezone.Visible = value
                end
            end
        end)
    end)
    
    Tabs.Misc:AddToggle("HideIdentityToggle", {
        Title = "Hide Identity",
        Default = false
    }):OnChanged(function(value)
        spawn(function()
            while value and Options and Options.HideIdentityToggle and Options.HideIdentityToggle.Value do
                pcall(function()
                    local hrp = GetHumanoidRootPart()
                    if hrp then
                        local user = hrp:FindFirstChild("user")
                        if user then
                            local streak = user:FindFirstChild("streak")
                            local level = user:FindFirstChild("level")
                            local userName = user:FindFirstChild("user")
                            if streak then streak.Text = "HIDDEN" end
                            if level then level.Text = "Level: HIDDEN" end
                            if userName then userName.Text = "HIDDEN" end
                        end
                    end
                    
                    if PlayerGui and PlayerGui:FindFirstChild("hud") then
                        local hud = PlayerGui.hud
                        if hud:FindFirstChild("safezone") then
                            local coins = hud.safezone:FindFirstChild("coins")
                            local lvl = hud.safezone:FindFirstChild("lvl")
                            if coins then coins.Text = "HIDDEN$" end
                            if lvl then lvl.Text = "HIDDEN LVL" end
                        end
                    end
                end)
                task.wait(0.1)
            end
        end)
    end)
    
    Tabs.Misc:AddSection("External Scripts")
    
    Tabs.Misc:AddButton({
        Title = "Infinite Yield",
        Description = "Admin commands",
        Callback = function()
            pcall(function()
                loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
            end)
        end
    })
    
    Tabs.Misc:AddButton({
        Title = "RemoteSpy",
        Description = "Monitor remote calls",
        Callback = function()
            pcall(function()
                loadstring(game:HttpGetAsync("https://github.com/richie0866/remote-spy/releases/latest/download/RemoteSpy.lua"))()
            end)
        end
    })
    
    Window:SelectTab(1)
end
